package edu.java.inheritance06;

public class StringTest {

	public static void main(String[] args) {
		// 상수(constant) : final로 선언된 변수 
		// 리터럴(literal) : 만들어진 값.
		final int x =1 ; //-> x: 상수,   1: 정수 리터럴
		
		// 일반형 참조변수: heap에 생겼다가 stack에 보내고 사라지고, 지역변수에 값 자체가 저장됨. 
		// 참조형 타입은 객체가 사라질 때까지 계속 유지. 지역변수(참조변수)에 그 객체의 주소가 저장
		
		
		/* 다른 메모리 (heap)에서 1이라는 리터럴이 어딘가에 만들어져있어야 복사해서 넣음. 
		*x: 지역변수 int 4byte를 스택영역에 확보 
		*기본타입: 1을 메모리 (heap) 어딘가에 임시로 만든 후 스택(지역변수)로 복사해오는 과정.
		*복사했으면 없어져도 됨.
		*100억 숫자를 만들수 있어야 컵(변수 x)에 넣던가 함. 정수기에 백억리터 없으면 내 컵에 따를 수 없음
		*4byte로는 부족
		*long L (리터럴)-> 100억 리터럴을 만들 때 8byte를 사용해서 숫자를 만들어라(선언)
		*이렇게 만들어진 숫자가 리터럴
		*리터럴이 먼저 만들어져야 그대로 가져올 수 있음
		*변수: 값을 담는 그릇
		*상수: final로 선언된 변수. 한번 값을 담으면 바꿀 수 없는. 
		*리터럴 중 문자열 리터럴은 독특한 특징을 가짐
		* s1: 문자열이 객체를 저장하려면 heap에 String(문자열리터럴?)이라는 객체가 만들어져야함.
		* String 객체를 만들려면 hello라는 문자들로 만들어진 문자열리터럴이 있어야 함. 
		* 그래야 찾아갈 수 있는 지역변수도 만들 수 있음.
		* 똑같은 문자들을 가지고 있는 리터럴을 계속해서 만들다보면 heap에 계속 쌓이게 됨.
		* 문자열 리터럴 재사용, 만들어져 있으면 주소를 그냥 적어버리는 것 
		* equals를 쓰지 않고 ==해도 true가 됨. 
		* 문자열 리터럴을 하나밖에 안 만드는 것 뿐. 메모리를 적게 사용하기 위해
		* 같은 문자열리터럴이 나오면 새로운 거 만들지 않고 그 주소를 주기만 함
		* 
		*  생성자를 부르면 얘기가 달라짐
		*  생성자 new가 들어가면 항상 
		*  생성자는 호출할 때마다 주소값이 달라진다. 
		*  
		*  메서드를 만들 때 String을 넘겨주면
		*  넘겨받은 문자열과 내 문자열을 비교하는 
		*  기존인지 새로운지 메서드 안에서 ..? 제끼자. 
		*/
		
		String s1 = "hello";  // -> s1: 변수, "hello" : 문자열리터럴
		String s2 = "hello2"; // hello라는 문자열("hello")이 있어야 문자열 객체(String)를 만들어줄 수 있음
		System.out.println(s1 == s2);  
		// true: JVM은 같은 문자열 리터럴은 두번 생성하지 않음. (한번 객체 만들고 계속해서 재활용)
		// 같은 주소에 있는 객체가 됨
		// 같은 문자를 가지고 있는 문자열임에도 불구하고 어떤 경우에는 false를 나타낸다
		// 문자열 비교할 땐  equals만 쓰자
		
		// 객체: 지역변수에 들어가는 주소값 때문이고, 기본값은 리터럴을 그대로 복사해주는 것
		// 동작방식의 차이 - 참조타입: 리터럴의 주소값을 저장, 기본값: 값 자체를 heap에서 stack으로 가져옴
		// 기본타입: . 찍고 참조 못하는 거고, 참조타입은 .찍고 리터럴을 찾아가는 것! 
		
		
		String s3 = new String("hello");
		String s4 = new String("hello");
		System.out.println(s3 == s4);   
		// false: 생성자는 호출할 때마다 새로운 객체를 heap 메모리에 새롭게 생성 
		// 다른 주소에 있는 객체가 됨
		
	}

}
