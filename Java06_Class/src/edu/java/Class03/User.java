package edu.java.Class03;

// 클래스 : 속성(field) + 생성자(constructor)+ 기능(method) => 데이터 타입
// 생성자 : 객체를 메모리에 생성하고 초기화해주는 기능을 담당하는 특별한 함수 (initialize 최초로 값을 저장함. 그 다음부턴 재할당)
// - 모드 클래스에는 반드시 적어도 1개 이상의 생성자가 있어야 함!
// - 클래스를 작성할 때 생성자를 하나도 정의(선언)하지 않으면, 
//자바 컴파일러(.java -> .class)가 "기본 생성자(default constructor)"를 자동으로 만들어 줌
// - 클래스를 작성할 때 생성자를 1개 이상을 정의하면, 
// 자바 컴파일러는 " 기본생성자를 자동으로 만들어 주지 않는다 "
// 생성자를 1개도 정의 안했을 때 컴파일러가 자동으로 만들어준다. 
// 생성자의 역할이 객체를 만들어주는 것. 그래서 new 할 수 있는것. 생성자가 없으면 객체 못 만든다. 개발자가 작성하지 않으면 컴파일러가 만들어주고 개발자가 만들지 않으면 컴파일러가 자동으로 만들어준다. 
// 생성자의 이름은 반드시 클래스 이름과 완전히 동일해야 함!
// 생성자는 리턴타입을 사용하지 않음! 메서드와의 차이. 
//역할 : 객체 만들어주고 값을 초기화함.

//  기본 생성자(default constructor) :
// 아규먼트를 갖지 않는 생성자. 파라미터가 선언되어 있지 않는 생성자
// -일반적으로 필드의 값들을 필드 타입의 기본값으로 초기화함. 
//다른 값으로 초기화 하는 코드를 만들 수 있지만, 일반적으로는 기본값으로 초기화함.
// - 기본값 : boolean - false, 정수 - 0; 실수 - 0.0, 참조타입(클래스 타입) - null
// 생성자 오버로딩 : 파라미터가 다른 생성자를 여러개 정의하는 것. 

public class User {  
	// field : 변수 선언부
	String userId;
	String userPassword;
	int userAge; 

	public User() {
//	 this.userAge = 0;
//	 this.userPassword =null;
//	 this.userId =null;
	 //메모리에 string string int의 값을 저장할 수 있는 공간을 만들고(공간확보) 기본값으로 초기화(어떤 값이 들어올 지 모름). 전부 다 0으로 채워진 문자열을 null. 
	}  // 코드를 작성하지 않아도, 각 필드들을 그 기본값으로 초기화를 해줌. 기본값으로 초기해주는 코드는 자동으로 들어가기 때문에 코드를 작성하지 않아도 됨. 각 필드는 기본값으로 초기화 됨. 생성자를 만들어주는 것까지만 하면 됨. 이 안쪽에 코드를 작성하지 않는건 가능
	
	
	// constructor : 객체 만듦     -----저장공간확보, 객체가 가지고 있는 변수(필드)에 넘겨받은 값을 초기화
	public User(String userId, String userPassword, int userAge) { //메서드 만들때와 동일하게 값이 필요하면 값을 전달받고, 넣어주면 됨. 생성자의 역할: 객체가 가진 변수(필드)를 초기화  /// 필드: 파랑, 변수와 파라미터 :갈색
		this.userId = userId ; // 이것이 가지고 있는 useriId : 필드를 가리킴
		this.userPassword = userPassword; //<<<<<-- 메모리에 생성된 인스턴스 찾아가서 아규먼트 넣어라!!!!!@@!@!@!
		this.userAge  = userAge;
		// field를 초기화 (필드변수 - this.)
		// this : field userid 와 parameter userId(지역변수)를 구별하기 위해서 사용. 
		//전달받은 값을 지역변수로만 가지고 있는게 아니라. 필드를 초기화해야. 메인에서 user 호출할 때 필드의 값을 초기화함
		//필드 선언 이름과 지역변수 이름을 구분해야함. 키워드 - this.  필드에 있는 애들을 보여줌
		// 생성자 정의함. 유저 생성 시 유저아이디, 유저패스워드, 에이지를 만들어야 객체를 만들수있다고 정의한 것. 
		// 기본 생성자와 위의 생성자를 동시에 쓰고 싶으면 기본생성자를 만들어줘야 함. 1개 이상의 생성자 정의해서 기본 컴파일러가 안 만들어줬음
	}

	// *******this의 의미(기능); 둘 중 하나  **********
	// (1) 생성된 객체(인스턴스) - 인스턴스의 필드와 지역변수를 구별하기 위한 용도 
	// (2) 오버로딩 된 다른 생성자 호출하는 코드 :   생성자 호출이기에 괄호 씀. 아규먼트 전달!! -메인에선 참조변수 이름으로 찾아가면됨. (user1.으로!), 
	//다른 클래스(설계도 입장에서 보면)... 객체를 만들었으니 메서드 호출이 가능할 것 
	//필드 입장에선 만들어진 객체= 내타입인 유저라는 객체가 만들어져있다고 가정하고 그 만들어진 객체가 자기의 필드를 가지고있다고 가정함. 내가 가지고있는 에이지.  this

	// method : 객체가 가진 기능을 하기 위한 함수
	public void printUserInfo() {  // 유저인포 메서드: 자기가 가지고 있는 것들을 출력함.
		System.out.printf("I: %s, PWD: %s, age: %d%n", userId, userPassword, userAge);
		// 구별 가능함 -> this 안씀. 메서드 안에서 선언된변수가 하나도 없음. 파라미터 선언 x, 파라미터 이외의 다른 지역변수도 없음!
       // this 가 생략된 것일뿐  
	}
	
	public User(String userId, String userPassword) {
//		this.userId = userId;
//		this.userPassword = userPassword;
//		this.userAge = 0;
		this(userId, userPassword, 0); // 강제로 0 넣어서 보냄.  생성자:객체 만들고 필드 채워넣음! 다 채웠으면 리턴함. 자기가 가진 데이터를 가지고 메서드가 실행된다! =클래스@@@@@@
	// 생성자 안에서 다른 생성자 부르려면 반드시 this만 써야함. @@@@@중요
	
		//내가 가지고 있는 같은 클래스 안의 다른 생성자!! 이 클래스가 가지고 있는
	}

}
